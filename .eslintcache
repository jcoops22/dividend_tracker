[{"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/Header.js":"1","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/App.js":"2","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/StocksList.js":"3","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/Toolbar.js":"4","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/AddForm.js":"5","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/Home.js":"6","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/SearchStocks.js":"7","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/resources/stockUtilities.js":"8","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/resources/nyseOBJ.js":"9","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/Landing.js":"10","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/SignIn.js":"11","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/Buttons/GoogleSignInButton.js":"12","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/Register.js":"13","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Firebase/firebase.js":"14","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/StocksWrapper.js":"15","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/Drawer.js":"16","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/StockToolbar.js":"17","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/index.js":"18","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/LoadingIcon.js":"19","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/user/user-types.js":"20","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/stocks/stocks-types.js":"21","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/stocks/stocks-reducer.js":"22","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/user/user-reducer.js":"23","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/store.js":"24","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/root-reducer.js":"25","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/resources/mediaquery.js":"26","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/user/user-selectors.js":"27","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/stocks/stocks-actions.js":"28","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/stocks/stocks-selectors.js":"29","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/user/user-actions.js":"30","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/TransformIcon.js":"31","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/DividendsForm.js":"32","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/ViewAll.js":"33","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/Footer.js":"34","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/AddMissing.js":"35","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/D3Graph.js":"36","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/Reports.js":"37","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/ReportComponents/HowManyStocks.js":"38","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/reportWebVitals.js":"39"},{"size":2026,"mtime":1609045961581,"results":"40","hashOfConfig":"41"},{"size":1954,"mtime":1609574176448,"results":"42","hashOfConfig":"41"},{"size":7996,"mtime":1609491880680,"results":"43","hashOfConfig":"41"},{"size":2977,"mtime":1609575695431,"results":"44","hashOfConfig":"41"},{"size":1752,"mtime":1609186314636,"results":"45","hashOfConfig":"41"},{"size":2481,"mtime":1609115977145,"results":"46","hashOfConfig":"41"},{"size":10565,"mtime":1609217866049,"results":"47","hashOfConfig":"41"},{"size":8339,"mtime":1609528665858,"results":"48","hashOfConfig":"41"},{"size":196095,"mtime":1608023988086,"results":"49","hashOfConfig":"41"},{"size":12171,"mtime":1609263035797,"results":"50","hashOfConfig":"41"},{"size":6392,"mtime":1609184587739,"results":"51","hashOfConfig":"41"},{"size":266,"mtime":1608090369026,"results":"52","hashOfConfig":"41"},{"size":4734,"mtime":1609178037674,"results":"53","hashOfConfig":"41"},{"size":1501,"mtime":1608259028241,"results":"54","hashOfConfig":"41"},{"size":3223,"mtime":1609116278052,"results":"55","hashOfConfig":"41"},{"size":5414,"mtime":1609492094377,"results":"56","hashOfConfig":"41"},{"size":8531,"mtime":1609576431153,"results":"57","hashOfConfig":"41"},{"size":701,"mtime":1608244540191,"results":"58","hashOfConfig":"41"},{"size":3136,"mtime":1608567496065,"results":"59","hashOfConfig":"41"},{"size":124,"mtime":1608497001270,"results":"60","hashOfConfig":"41"},{"size":196,"mtime":1609023340218,"results":"61","hashOfConfig":"41"},{"size":1289,"mtime":1609023486820,"results":"62","hashOfConfig":"41"},{"size":861,"mtime":1609023456999,"results":"63","hashOfConfig":"41"},{"size":334,"mtime":1608248159585,"results":"64","hashOfConfig":"41"},{"size":796,"mtime":1609024935585,"results":"65","hashOfConfig":"41"},{"size":591,"mtime":1601309934587,"results":"66","hashOfConfig":"41"},{"size":293,"mtime":1608495201955,"results":"67","hashOfConfig":"41"},{"size":537,"mtime":1609023327356,"results":"68","hashOfConfig":"41"},{"size":487,"mtime":1609023433975,"results":"69","hashOfConfig":"41"},{"size":260,"mtime":1608494959365,"results":"70","hashOfConfig":"41"},{"size":1328,"mtime":1608604373721,"results":"71","hashOfConfig":"41"},{"size":10706,"mtime":1609254888570,"results":"72","hashOfConfig":"41"},{"size":5307,"mtime":1609120334322,"results":"73","hashOfConfig":"41"},{"size":625,"mtime":1609115111728,"results":"74","hashOfConfig":"41"},{"size":4870,"mtime":1609259328070,"results":"75","hashOfConfig":"41"},{"size":5070,"mtime":1609531407715,"results":"76","hashOfConfig":"41"},{"size":1500,"mtime":1609576934983,"results":"77","hashOfConfig":"41"},{"size":1321,"mtime":1609579367031,"results":"78","hashOfConfig":"41"},{"size":362,"mtime":1607318708302,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"182bvzp",{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"85"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"85"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"85"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"85"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"85"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"85"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"85"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"85"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"85"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/Header.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/App.js",["169"],"import \"./App.css\";\nimport React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Switch, Route, Redirect, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { auth } from \"./Components/Firebase/firebase\";\nimport Home from \"./Components/Home/Home\";\nimport Landing from \"./Components/Home/Landing\";\nimport { selectCurrentUser } from \"./redux/user/user-selectors\";\nimport { setCurrentUser } from \"./redux/user/user-actions\";\nimport SignIn from \"./Components/Home/SignIn\";\nimport Reports from \"./Components/Home/Reports\";\n\nfunction App({ selectCurrentUser, setCurrentUser, history }) {\n  useEffect(() => {\n    console.log(\"in the app.js\");\n    auth.onAuthStateChanged((user) => {\n      if (!user) {\n        setCurrentUser(null);\n      }\n    });\n  }, [auth]);\n\n  return (\n    <Container className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={Landing} />\n        <Route\n          exact\n          path=\"/signin\"\n          render={() =>\n            !selectCurrentUser ? <SignIn /> : <Redirect to=\"/home\" />\n          }\n        />\n        <Route\n          exact\n          path=\"/home\"\n          render={() =>\n            selectCurrentUser ? <Home history={history} /> : <Landing />\n          }\n        />\n        <Route\n          exact\n          path=\"/reports\"\n          render={() =>\n            selectCurrentUser ? <Reports history={history} /> : <SignIn />\n          }\n        />\n        <Route path=\"*\" component={Landing} />\n      </Switch>\n    </Container>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  selectCurrentUser: selectCurrentUser,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrentUser: (user) => dispatch(setCurrentUser(user)),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n// styles\nconst Container = styled.div`\n  /* border: 2px solid blue; */\n`;\n",["170","171"],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/StocksList.js",["172"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { device } from \"../../resources/mediaquery\";\nimport { getUserStocks } from \"../../resources/stockUtilities\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport LoadingIcon from \"../Shared/LoadingIcon\";\nimport StocksWrapper from \"./StocksWrapper\";\nimport {\n  selectCurrentUser,\n  selectCurrentUserStocks,\n} from \"../../redux/user/user-selectors\";\nimport { setCurrentUserStocks } from \"../../redux/user/user-actions\";\n\nconst StocksList = ({\n  selectCurrentUser,\n  setCurrentUserStocks,\n  selectCurrentUserStocks,\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [filteredStocks, setFilteredStocks] = useState(selectCurrentUserStocks);\n  const [query, setQuery] = useState(null);\n  const [sortType, setSortType] = useState(null);\n  const [scrollUpIcon] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608673604/Dividend%20Tracker/Icons/Stocklist/up-arrow-svgrepo-com_ghr6pj.svg\"\n  );\n  const [searchIcon] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608665469/Dividend%20Tracker/Icons/Stocklist/search-svgrepo-com_gfadnk.svg\"\n  );\n\n  useEffect(() => {\n    // handle searching\n    if (!query) {\n      setLoading(true);\n      setSortType(null);\n      updateUserStocks();\n    } else {\n      handleSearchFilter(query);\n    }\n  }, [setCurrentUserStocks, query]);\n\n  const updateUserStocks = async () => {\n    let stocks = await getUserStocks(selectCurrentUser.id);\n    setCurrentUserStocks(stocks);\n    setFilteredStocks(stocks);\n\n    setLoading(false);\n  };\n  // sort the filteredStocks array\n  const handleSort = (arr, sort) => {\n    // NEWEST\n    if (sort === \"Newest\") {\n      return arr.sort((a, b) => (a.added < b.added ? 1 : -1));\n    }\n    // OLDEST\n    else if (sort === \"Oldest\") {\n      return arr.sort((a, b) => (a.added > b.added ? 1 : -1));\n    }\n    // MOST DIVIDENDS\n    else if (sort === \"Most Dividends\") {\n      let amountsArr = arr.map((s) => {\n        if (s.payouts) {\n          return { ...s, total: getTotal(s.payouts) };\n        } else {\n          return { ...s, total: 0 };\n        }\n      });\n      return amountsArr.sort((a, b) => (a.total < b.total ? 1 : -1));\n    }\n    // LEAST DIVIDENDS\n    else if (sort === \"Least Dividends\") {\n      let amountsArr = arr.map((s) => {\n        if (s.payouts) {\n          return { ...s, total: getTotal(s.payouts) };\n        } else {\n          return { ...s, total: 0 };\n        }\n      });\n      return amountsArr.sort((a, b) => (a.total > b.total ? 1 : -1));\n    }\n    // MOST PAYOUTS\n    else if (sort === \"Most Payouts\") {\n      let payoutsArr = arr.map((s) => {\n        if (s.payouts) {\n          return { ...s };\n        } else {\n          return { ...s, payouts: [] };\n        }\n      });\n      return payoutsArr.sort((a, b) =>\n        a.payouts.length < b.payouts.length ? 1 : -1\n      );\n    } else {\n      return arr;\n    }\n  };\n  // generate total for dividend sorts\n  const getTotal = (divsArr) => {\n    let total = 0;\n    divsArr.forEach((payout) => {\n      let amount = parseFloat(payout.amount);\n      total += amount;\n    });\n    console.log(total);\n    return total;\n  };\n\n  // handle the query and set filtered results\n  const handleSearchFilter = (query) => {\n    if (query.length) {\n      setFilteredStocks(\n        selectCurrentUserStocks.filter(\n          (stock) =>\n            stock.name.toLowerCase().includes(query.toLowerCase()) ||\n            stock.ticker.toLowerCase().includes(query.toLowerCase())\n        )\n      );\n    }\n  };\n\n  return (\n    <Container>\n      <h1>\n        Your Stocks:{\" \"}\n        <span>\n          ({query ? filteredStocks.length : selectCurrentUserStocks.length})\n        </span>\n      </h1>\n      {loading ? (\n        <LoadingIcon big={true} height={\"6rem\"} />\n      ) : (\n        <StockContainer>\n          <UtilitiesRow>\n            <SearchBar>\n              <img src={searchIcon} alt=\"search\" />\n              <input\n                autoFocus\n                type=\"text\"\n                placeholder=\"search your stocks\"\n                onChange={(e) => setQuery(e.target.value)}\n              />\n              {query ? (\n                <span onClick={() => setQuery(null)}> &#10005; </span>\n              ) : null}\n            </SearchBar>\n            <SortWrapper>\n              <p>Sort by:</p>\n              <SortBy\n                onChange={(e) => {\n                  setSortType(e.target.value);\n                  handleSort(e.target.value);\n                }}\n              >\n                <option default value={null}>\n                  None\n                </option>\n                <option value={\"Most Dividends\"}>Most Dividends</option>\n                <option value={\"Least Dividends\"}>Least Dividends</option>\n                <option value={\"Most Payouts\"}>Most Payouts</option>\n                <option value={\"Newest\"}>Newest</option>\n                <option value={\"Oldest\"}>Oldest</option>\n              </SortBy>\n            </SortWrapper>\n          </UtilitiesRow>\n          {selectCurrentUserStocks.length ? (\n            <StocksWrapper\n              stocks={\n                query\n                  ? handleSort(filteredStocks, sortType)\n                  : handleSort(selectCurrentUserStocks, sortType)\n              }\n            />\n          ) : (\n            \"Add some stocks!\"\n          )}\n          {selectCurrentUserStocks.length > 6 ? (\n            <ScrollUp>\n              <img\n                src={scrollUpIcon}\n                alt=\"scroll up\"\n                onClick={() => window.scrollTo(0, 0)}\n              />\n            </ScrollUp>\n          ) : null}\n        </StockContainer>\n      )}\n    </Container>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  selectCurrentUser: selectCurrentUser,\n  selectCurrentUserStocks: selectCurrentUserStocks,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrentUserStocks: (stocks) => dispatch(setCurrentUserStocks(stocks)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StocksList);\n\n// styles\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  /* background-color: blue; */\n\n  h1 {\n    margin-bottom: 0.8rem;\n\n    span {\n      font-size: 1.3rem;\n    }\n  }\n`;\nconst StockContainer = styled.div`\n  width: 100%;\n  max-width: 1024px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: 0 0.3rem;\n  /* border: 1px solid red; */\n`;\nconst UtilitiesRow = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: space-between;\n  align-items: center;\n\n  @media ${device.tabletS} {\n    flex-direction: row;\n  }\n`;\nconst SearchBar = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 3rem;\n  padding: 0 0.3rem;\n  margin: 0.5rem 0;\n  border-radius: 3px;\n  border: 2px solid #7249d1;\n\n  img {\n    width: 1.8rem;\n    margin-right: 1rem;\n  }\n  input {\n    width: 200px;\n    height: 100%;\n    font-size: 18px;\n    border: none;\n    outline: none;\n    /* border: 2px solid red; */\n  }\n\n  span {\n    position: absolute;\n    left: calc(100% - 1.5rem);\n    width: 2rem;\n    color: #ff3501;\n    opacity: 0.7;\n    cursor: pointer;\n    /* border: 1px solid red; */\n  }\n`;\nconst SortWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  /* border: 1px solid red; */\n\n  p {\n    margin-left: 1rem;\n  }\n`;\nconst SortBy = styled.select`\n  position: relative;\n  width: 8rem;\n  height: 2rem;\n  margin-left: 1rem;\n`;\nconst ScrollUp = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  /* border: 1px solid red; */\n\n  img {\n    width: 3rem;\n    opacity: 0;\n    cursor: pointer;\n    animation: fade_scrollIcon_in 0.5s forwards;\n  }\n\n  @keyframes fade_scrollIcon_in {\n    to {\n      opacity: 1;\n    }\n  }\n`;\n","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/Toolbar.js",["173"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { device } from \"../../resources/mediaquery\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectShowAllDivs } from \"../../redux/stocks/stocks-selectors\";\nimport AddForm from \"../Home/AddForm\";\nimport ViewAll from \"../Home/ViewAll\";\n\nconst Toolbar = ({ selectShowAllDivs }) => {\n  const [add] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608615849/Dividend%20Tracker/Icons/Stock%20Toolbar/plus-svgrepo-com_mtsovt.svg\"\n  );\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [showViewAllForm, setShowViewAllForm] = useState(\n    selectShowAllDivs.show || false\n  );\n\n  useEffect(() => {\n    setShowViewAllForm(selectShowAllDivs.show);\n  }, [selectShowAllDivs, showViewAllForm]);\n\n  return (\n    <Container\n      onClick={() => {\n        return showAddForm ? setShowAddForm(false) : null;\n      }}\n    >\n      <ReportButton>\n        <Link to=\"/reports\">\n          <button>Reports</button>\n        </Link>\n      </ReportButton>\n      <AddTickerWrapper>\n        <AddTicker onClick={() => setShowAddForm(true)}>\n          <span>Add stock</span>\n          <img src={add} alt=\"add\" />\n        </AddTicker>\n      </AddTickerWrapper>\n      {showAddForm ? <AddForm /> : null}\n      {showViewAllForm ? <ViewAll payouts={selectShowAllDivs.payouts} /> : null}\n    </Container>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  selectShowAllDivs: selectShowAllDivs,\n});\nconst mapDispatchToProps = (dispatch) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);\n\n// styles\nconst Container = styled.div`\n  width: 100%;\n  height: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #fff;\n  background-color: #7249d1;\n  background-color: #edc639;\n  background-color: #fff;\n  margin-bottom: 3rem;\n  padding: 0;\n  overflow: hidden;\n  opacity: 0;\n  animation: drop_toolbar_down 0.5s 1s forwards;\n  border-bottom: 2px solid #999;\n\n  @keyframes drop_toolbar_down {\n    to {\n      opacity: 1;\n      padding: 0.5rem;\n      height: 4.25rem;\n    }\n  }\n`;\nconst ReportButton = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  /* border: 2px solid #edc639; */\n  /* border: 1px solid red; */\n\n  button {\n    width: 6rem;\n    height: 3rem;\n    cursor: pointer;\n    border-radius: 3px;\n  }\n`;\nconst AddTickerWrapper = styled.div`\n  width: 100%;\n  height: 3rem;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  /* border: 1px solid red; */\n`;\nconst AddTicker = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 0 1rem;\n  box-shadow: 2px 2px 8px 0 #999;\n  background-color: #fff;\n  cursor: pointer;\n  /* border: 1px solid orange; */\n\n  img {\n    margin-left: 1rem;\n    width: 2rem;\n  }\n`;\n","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/AddForm.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/Home.js",["174"],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/SearchStocks.js",["175"],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/resources/stockUtilities.js",["176"],"import { firestore } from \"../Components/Firebase/firebase\";\nimport axios from \"axios\";\nimport { nas } from \"../resources/nyseOBJ\";\n\nexport const updateStocks = () => {\n  // let ref = firestore.collection(\"symbols\");\n  // ref\n  //   .get()\n  //   .then((data) => {\n  //     return data.docs.map((doc) => {\n  //       return doc.data();\n  //     });\n  //   })\n  //   .then((obj) => {\n  //     // console.log(obj[0].symbols);\n  //     let nyse = obj[0].symbols.map((stock) => {\n  //       return {\n  //         name: stock[\"Company Name\"],\n  //         ticker: stock[\"ACT Symbol\"],\n  //       };\n  //     });\n  //     let adjusted = nas.map((stock) => {\n  //       return {\n  //         name: stock[\"Company Name\"],\n  //         ticker: stock[\"Symbol\"],\n  //       };\n  //     });\n  // console.log(adjusted.concat(nyse));\n  // ref.doc().set({\n  //   symbols: adjusted.concat(nyse),\n  // });\n  // });\n  // ref.doc().set({\n  // })\n};\n\nexport const makeTodaysDate = () => {\n  const now = new Date();\n  return `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;\n};\n// format data to month * day * year\nexport const formatDateData = (data) => {\n  if (data === \"No data\" || data === \"None\") {\n    return \"No Data\";\n  }\n  let year = data.slice(2, 4);\n  let month = data.slice(5, 7);\n  let day = data.slice(8, 10);\n\n  // console.log(data, year, month, day);\n  return `${month}/${day}/${year}`;\n};\n\n// get the users added stocks\nexport const getUserStocks = async (userID) => {\n  let ref = firestore.doc(`users/${userID}`);\n\n  let arr = await ref.get().then((data) => {\n    return data.data().stocks;\n  });\n  return arr;\n};\n\n// API calls to get data for requested stock\nexport const getTickerInfo = async (ticker, timeInterval) => {\n  // intervals options: 1, 5, 15, 30, 60\n  let interval = timeInterval;\n  let api_KEY = \"3M8136KILLJ20M9K\";\n  // let currentInfo = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${ticker}&apikey=${api_KEY}`;\n  let currentInfo = `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${ticker}&interval=${interval}min&apikey=${api_KEY}`;\n  let overview = `https://www.alphavantage.co/query?function=OVERVIEW&symbol=${ticker}&apikey=${api_KEY}`;\n  // OVERVIEW API CALL\n  let overviewData = await axios\n    .get(overview)\n    .then((data) => {\n      if (data.data.Note) {\n        return {\n          yield: \"No data\",\n          divPerShare: \"No data\",\n          exDivDate: \"No data\",\n          payDivDate: \"No data\",\n        };\n      } else {\n        // console.log(\"All data\", data);\n        const {\n          DividendYield,\n          DividendPerShare,\n          DividendDate,\n          ExDividendDate,\n        } = data.data;\n\n        return {\n          ticker: ticker,\n          yield: DividendYield,\n          divPerShare: DividendPerShare,\n          exDivDate: ExDividendDate,\n          payDivDate: DividendDate,\n        };\n      }\n    })\n    .catch((err) => {\n      console.log(\"There was a problem getting the data\", err.message);\n      return {\n        yield: \"No data\",\n        divPerShare: \"No data\",\n        exDivDate: \"No data\",\n        payDivDate: \"No data\",\n      };\n    });\n  // TIME SERIES API CALL\n  let seriesData = await axios\n    .get(currentInfo)\n    .then((data) => {\n      console.log(data);\n      if (data.data.Note) {\n        console.log(\"Timeout occurred\");\n        return {\n          yield: \"No data\",\n          divPerShare: \"No data\",\n          exDivDate: \"No data\",\n          payDivDate: \"No data\",\n        };\n      }\n      let time_series_arr = Object.entries(\n        data.data[`Time Series (${interval}min)`]\n      );\n      // let time_series_arr = Object.entries(data.data[\"Time Series (Daily)\"]);\n      let obj = time_series_arr.map((arr) => {\n        return {\n          lastUpdated: arr[0],\n          value: \"$\" + arr[1][\"4. close\"].slice(0, -2),\n        };\n      });\n      return {\n        ...obj,\n        value: obj[0].value,\n      };\n    })\n    .catch((err) => {\n      console.log(\n        \"There was a problem getting the interval data,\",\n        err.message\n      );\n      return {\n        lastUpdated: \"No Data\",\n        value: \"Data Not Available\",\n      };\n    });\n  console.log({\n    ...overviewData,\n    timeDate: seriesData,\n    value: seriesData.value,\n  });\n  return {\n    ...overviewData,\n    timeDate: seriesData,\n    value: seriesData.value,\n  };\n};\n\n// add stock to users stock list\nexport const addStock = async (userID, stock) => {\n  let ref = firestore.doc(`users/${userID}`);\n  let currentUserObj = await ref.get().then((data) => data.data());\n\n  let updatedStocksArray = await ref\n    .get()\n    .then((data) => {\n      let newArr = [stock];\n      data.data().stocks.forEach((s) => {\n        if (s.ticker === stock.ticker) {\n          alert(\"Stock already exists in your list\");\n          return;\n        } else {\n          newArr.push(s);\n        }\n      });\n      return newArr;\n    })\n    .catch((err) => {\n      return {\n        message: err.message,\n      };\n    });\n  // take current user object and update the stocks array property\n  let updatedObj = {\n    ...currentUserObj,\n    stocks: updatedStocksArray,\n  };\n  // console.log(updatedStocksArray);\n  // console.log(updatedObj);\n  // update the user's stocks\n  ref.set({\n    ...updatedObj,\n  });\n\n  return updatedStocksArray;\n};\n// delete stock from users list of stocks\nexport const deleteStock = async (userID, stock) => {\n  let ref = firestore.doc(`users/${userID}`);\n  let currentUserObj = await ref.get().then((data) => data.data());\n  let updatedStocksArray = await ref\n    .get()\n    .then((data) => {\n      return data.data().stocks.filter((s) => {\n        return s.ticker !== stock.ticker;\n      });\n    })\n    .catch((err) => {\n      return {\n        message: err.message,\n      };\n    });\n  // take current user object and update the stocks array property\n  let updatedObj = { ...currentUserObj, stocks: updatedStocksArray };\n  // console.log(updatedStocksArray);\n  // console.log(updatedObj);\n  // update the user's stocks\n  ref.set({\n    ...updatedObj,\n  });\n  return updatedStocksArray;\n};\n\nexport const updateStockDividend = async (userID, stock, payout) => {\n  let ref = firestore.doc(`users/${userID}`);\n  let currentUserObj = await ref.get().then((data) => data.data());\n  let updatedStockArr = await ref\n    .get()\n    .then((data) => {\n      return data.data().stocks.map((s) => {\n        return s.ticker === stock.ticker\n          ? {\n              ...s,\n              payouts: payout.sort((a, b) => (a.payDate < b.payDate ? 1 : -1)), //sort chonologically by date decending\n            }\n          : s;\n      });\n    })\n    .catch((err) => {\n      return {\n        message: err.message,\n      };\n    });\n  // console.log(currentUserObj);\n  // console.log(updatedStockArr);\n  let updatedObj = { ...currentUserObj, stocks: updatedStockArr };\n\n  ref.set({\n    ...updatedObj,\n  });\n  console.log(\n    \"from utilities--UpdateStocksDividens new payout added: \",\n    updatedStockArr\n  );\n  return updatedStockArr;\n};\n\n// get the dividends history\nexport const getStockDividends = async (userID, stock) => {\n  let ref = firestore.doc(`users/${userID}`);\n  let updatedStockArr = await ref\n    .get()\n    .then((data) => {\n      return data.data().stocks.filter((s) => {\n        return s.ticker === stock.ticker;\n      });\n    })\n    .then((data) => {\n      // console.log(data[0].payouts);\n      return data[0].payouts;\n    })\n    .catch((err) => {\n      console.log(err);\n      return {\n        message: err.message,\n      };\n    });\n  console.log(\"from utilities--GETStockDividend:\", updatedStockArr);\n  return updatedStockArr;\n};\n\n// delete incorrectly entered dividends\nexport const deleteDividend = async (userID, stock, id) => {\n  let ref = firestore.doc(`users/${userID}`);\n  let updatedStockArr = await ref\n    .get()\n    .then((data) => {\n      return data.data().stocks.filter((s) => {\n        return s.ticker === stock.ticker;\n      });\n    })\n    .then((data) => {\n      // console.log(data[0].payouts[index]);\n      return data[0].payouts.filter((pay) => pay.created !== id);\n      // return data[0].payouts;\n    })\n    .catch((err) => {\n      console.log(err);\n      return {\n        message: err.message,\n      };\n    });\n  console.log(\"From utilities-- deleted stocks new array\", updatedStockArr);\n  return updatedStockArr;\n};\n","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/resources/nyseOBJ.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/Landing.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/SignIn.js",["177","178","179"],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/Buttons/GoogleSignInButton.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/Register.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Firebase/firebase.js",["180"],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/StocksWrapper.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/Drawer.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/StockToolbar.js",["181","182"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { device } from \"../../resources/mediaquery\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { deleteStock, getTickerInfo } from \"../../resources/stockUtilities\";\nimport { setCurrentUserStocks } from \"../../redux/user/user-actions\";\nimport { setTickerData, setReload } from \"../../redux/stocks/stocks-actions\";\nimport {\n  selectCurrentUser,\n  selectCurrentUserStocks,\n} from \"../../redux/user/user-selectors\";\nimport {\n  selectReload,\n  selectTickerData,\n} from \"../../redux/stocks/stocks-selectors\";\nimport TransformIcon from \"../Shared/TransformIcon\";\nimport Drawer from \"./Drawer\";\n\nconst StockToolbar = ({\n  stock,\n  selectCurrentUser,\n  setTickerData,\n  setCurrentUserStocks,\n  selectCurrentUserStocks,\n  setReload,\n  selectReload,\n}) => {\n  const [deleteIcon] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608651426/Dividend%20Tracker/Icons/Stock%20Toolbar/delete-folder-hand-drawn-outline-svgrepo-com_rjmcgy.svg\"\n  );\n  const [infoIcon] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608614713/Dividend%20Tracker/Icons/Stock%20Toolbar/info-svgrepo-com_quyddh.svg\"\n  );\n  const [closeInfoIcon] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608615238/Dividend%20Tracker/Icons/Stock%20Toolbar/up-arrow-svgrepo-com_i2hote.svg\"\n  );\n  const [openIcon] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608615849/Dividend%20Tracker/Icons/Stock%20Toolbar/plus-svgrepo-com_mtsovt.svg\"\n  );\n  const [closeIcon] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608616032/Dividend%20Tracker/Icons/Stock%20Toolbar/close-svgrepo-com_nohmjc.svg\"\n  );\n  const [showModal, setShowModal] = useState(false);\n  const [showDrawer, setShowDrawer] = useState(false);\n  const [tickerInfo, setTickerInfo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showInfo, setShowInfo] = useState(false);\n  const [showDividend, setShowDividend] = useState(false);\n\n  const assignTickerData = async () => {\n    setLoading(true);\n    if (showDrawer && showInfo) {\n      return;\n    }\n\n    let data = await getTickerInfo(stock.ticker, 60);\n    setTickerData(data);\n    setTickerInfo(data);\n    setLoading(!!!data);\n    console.log(data);\n  };\n\n  // BUTTONS Functions\n  // update the stocks list after delete\n  const updateAfterDelete = async (user, stock) => {\n    let success = await deleteStock(user, stock);\n    if (success.message === undefined) {\n      console.log(\"success\");\n      setCurrentUserStocks(\n        selectCurrentUserStocks.filter(\n          (stocks) => stocks.ticker !== stock.ticker\n        )\n      );\n      setReload(!selectReload);\n    } else {\n      console.log(success.message);\n    }\n  };\n  // tasks when DIVIDEND drawer is opened\n  const handleShowDividend = () => {\n    if (showDividend) {\n      setShowDrawer(false);\n      setShowDividend(false);\n    } else {\n      setLoading(false);\n      setShowDrawer(true);\n      setShowDividend(true);\n      setShowInfo(false);\n    }\n  };\n\n  // tasks when INFO drawer is opened\n  const handleShowInfo = () => {\n    if (showInfo) {\n      setShowDrawer(false);\n      setShowInfo(false);\n      assignTickerData();\n    } else {\n      assignTickerData();\n      setShowDrawer(true);\n      setShowInfo(true);\n      setShowDividend(false);\n    }\n  };\n\n  return (\n    <Container>\n      <Wrapper>\n        <IconWrapper>\n          <img\n            src={deleteIcon}\n            alt=\"delete stock entry\"\n            onClick={() => {\n              setShowModal(true);\n            }}\n          />\n        </IconWrapper>\n        <IconWrapper\n          onClick={() => {\n            handleShowInfo();\n          }}\n        >\n          <TransformIcon\n            first={infoIcon}\n            second={closeInfoIcon}\n            w1={\"1.5rem\"}\n            w2={\"1.5rem\"}\n            transform={showInfo}\n          />\n        </IconWrapper>\n        <IconWrapper\n          onClick={() => {\n            handleShowDividend();\n          }}\n        >\n          <TransformIcon\n            first={openIcon}\n            second={closeIcon}\n            w1={\"1.5rem\"}\n            w2={\"1.2rem\"}\n            transform={showDividend}\n          />\n        </IconWrapper>\n      </Wrapper>\n      {showModal ? (\n        <Modal\n          animationName={\n            showModal ? \"fade_delete_modal_in\" : \"fade_delete_modal_out\"\n          }\n          onClick={() => setShowModal(false)}\n        >\n          <ConfirmDelete>\n            <ConfirmDeleteWrapper style={{ background: \"#fff\" }}>\n              <p>\n                <u>DELETE</u>: {stock.name}({stock.ticker})\n              </p>\n              <ButtonsWrapper>\n                <input\n                  type=\"button\"\n                  value=\"Delete\"\n                  onClick={() => {\n                    setShowDrawer(false);\n                    setShowInfo(false);\n                    setShowDividend(false);\n                    updateAfterDelete(selectCurrentUser.id, stock);\n                  }}\n                />\n                <input\n                  bg={\"#7249d1\"}\n                  type=\"button\"\n                  value=\"Cancel\"\n                  onClick={() => setShowModal(false)}\n                />\n              </ButtonsWrapper>\n            </ConfirmDeleteWrapper>\n          </ConfirmDelete>\n        </Modal>\n      ) : null}\n      <Drawer\n        key={stock.ticker}\n        info={showInfo}\n        dividends={showDividend}\n        stock={stock}\n        open={showDrawer}\n        data={tickerInfo}\n        loading={loading}\n      />\n    </Container>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  selectCurrentUser: selectCurrentUser,\n  selectTickerData: selectTickerData,\n  selectCurrentUserStocks: selectCurrentUserStocks,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  setTickerData: (data) => dispatch(setTickerData(data)),\n  setCurrentUserStocks: (stocks) => dispatch(setCurrentUserStocks(stocks)),\n  setReload: (bool) => dispatch(setReload(bool)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StockToolbar);\n\n// styles\nconst Container = styled.div`\n  width: 100%;\n  height: 25%;\n  /* background-color: #3ed; */\n`;\nconst Wrapper = styled.div`\n  width: 100%;\n  padding: 0.3rem;\n  display: flex;\n  flex-direction: row-reverse;\n  justify-content: flex-start;\n`;\nconst IconWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 1.5rem;\n  margin: 0 0.7rem;\n  cursor: pointer;\n  border-radius: 50%;\n  /* border: 1px solid red; */\n\n  img {\n    width: 100%;\n  }\n`;\nconst Modal = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0);\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  animation: 0.4s forwards;\n  animation-name: ${(props) => props.animationName};\n\n  @keyframes fade_delete_modal_in {\n    to {\n      background-color: rgba(0, 0, 0, 0.6);\n    }\n  }\n\n  @keyframes fade_delete_modal_out {\n    from {\n      background-color: rgba(0, 0, 0, 0);\n    }\n  }\n`;\nconst ConfirmDelete = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 92%;\n  max-width: 400px;\n  margin: 0 auto;\n  padding: 0.1rem;\n  border-radius: 3px;\n  background: rgb(114, 73, 209);\n  background: linear-gradient(\n    149deg,\n    rgba(114, 73, 209, 1) 40%,\n    rgba(39, 214, 123, 1) 60%\n  );\n  /* border: 1px solid red; */\n\n  p {\n    width: 100%;\n    padding: 0.4rem 0;\n    font-size: 1rem;\n    text-align: center;\n    /* border: 1px solid red; */\n\n    u {\n      font-size: 1rem;\n      font-weight: 600;\n    }\n  }\n`;\nconst ConfirmDeleteWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #fff;\n  width: 100%;\n  height: 100%;\n  padding: 1rem;\n  border-radius: 3px;\n`;\nconst ButtonsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 200px;\n  padding: 1rem 0;\n  /* border: 2px solid red; */\n\n  input {\n    &:focus {\n      outline: none;\n    }\n    &:hover {\n      color: #fff;\n      background-color: #7249d1;\n    }\n    transition-duration: 0.2s;\n    cursor: pointer;\n    width: 5rem;\n    height: 2rem;\n    border-radius: 20px;\n    background-color: #fff;\n    border: 2px solid #7249d1;\n  }\n\n  input[value=\"Cancel\"] {\n    &:hover {\n      color: #000;\n      background-color: #27d67b;\n    }\n    border-color: #27d67b;\n  }\n`;\n","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/index.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/LoadingIcon.js",["183","184","185"],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/user/user-types.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/stocks/stocks-types.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/stocks/stocks-reducer.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/user/user-reducer.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/store.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/root-reducer.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/resources/mediaquery.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/user/user-selectors.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/stocks/stocks-actions.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/stocks/stocks-selectors.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/redux/user/user-actions.js",[],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/TransformIcon.js",["186"],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/DividendsForm.js",["187","188"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { device } from \"../../resources/mediaquery\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport {\n  updateStockDividend,\n  deleteDividend,\n  formatDateData,\n  makeTodaysDate,\n} from \"../../resources/stockUtilities\";\nimport {\n  selectCurrentUser,\n  selectCurrentUserStocks,\n} from \"../../redux/user/user-selectors\";\nimport {\n  setShowAllDivs,\n  setShowAllDivsStock,\n} from \"../../redux/stocks/stocks-actions\";\nimport { setCurrentUserStocks } from \"../../redux/user/user-actions\";\nimport { selectShowAllDivs } from \"../../redux/stocks/stocks-selectors\";\n\nconst DividendsForm = ({\n  stock,\n  selectCurrentUser,\n  setShowAllDivs,\n  setCurrentUserStocks,\n  selectCurrentUserStocks,\n}) => {\n  const [amount, setAmount] = useState(0);\n  const [payDate, setPayDate] = useState(makeTodaysDate());\n  const [stockPayouts, setStockPayouts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [deleteIcon] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608651426/Dividend%20Tracker/Icons/Stock%20Toolbar/delete-folder-hand-drawn-outline-svgrepo-com_rjmcgy.svg\"\n  );\n  const [littleLoader] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608614181/Dividend%20Tracker/Icons/SearchResults/loading-loader-svgrepo-com_urrwap.svg\"\n  );\n  const [openModalIcon] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1609038418/Dividend%20Tracker/Icons/Stock%20Toolbar/share-arrows-svgrepo-com_npdvvm.svg\"\n  );\n  useEffect(() => {\n    // set the stockPayouts variable\n    setStockPayouts(\n      selectCurrentUserStocks.filter((s) => s.ticker === stock.ticker)[0]\n        .payouts || []\n    );\n    // populate the total in the history header\n    if (stockPayouts.length) {\n      getTotal();\n    }\n  }, [selectCurrentUserStocks]);\n\n  // handle recording the dividend\n  const handleSubmit = async () => {\n    setLoading(true);\n    // if they don't have any payout yet make an empty array\n    let payoutObj = {\n      amount: amount,\n      payDate: payDate,\n      created: new Date().getTime(),\n    };\n    // console.log(stock.payouts);\n    let success = await updateStockDividend(\n      selectCurrentUser.id,\n      stock,\n      stockPayouts.concat(payoutObj)\n    );\n    console.log(\"updatestockdiv--return\", success);\n    if (success.message === undefined) {\n      setCurrentUserStocks(success);\n      setAmount(0);\n      setPayDate(makeTodaysDate());\n      setLoading(false);\n    } else {\n      console.log(\"There was an error.\");\n      return {\n        message: success.message,\n      };\n    }\n  };\n\n  // handle delete\n  const handleDelete = async (createdID) => {\n    setLoading(true);\n    let newDividends = await deleteDividend(\n      selectCurrentUser.id,\n      stock,\n      createdID\n    );\n    console.log(newDividends);\n    let success = await updateStockDividend(\n      selectCurrentUser.id,\n      stock,\n      newDividends\n    );\n    if (success.message === undefined) {\n      setCurrentUserStocks(success);\n      setLoading(false);\n    } else {\n      console.log(\"There was an error.\");\n      return {\n        message: success.message,\n      };\n    }\n  };\n  // generate total for history header\n  const getTotal = () => {\n    let acc = 0;\n    if (stockPayouts.length) {\n      stockPayouts.map((val) => {\n        return (acc += parseFloat(val.amount));\n      });\n      return acc.toFixed(2);\n    }\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Amount>\n          <label>Amount:</label>\n          <RowInput>\n            <span>&#36;</span>\n            <input\n              id=\"amount_input\"\n              autoFocus={window.innerWidth > 580 ? true : null}\n              type=\"number\"\n              min=\"0\"\n              step=\"0.01\"\n              default=\"0.00\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n            />\n          </RowInput>\n        </Amount>\n        <DateWrapper>\n          <label>Date:</label>\n          <input\n            id=\"payDate_input\"\n            type=\"date\"\n            value={payDate}\n            onChange={(e) => setPayDate(e.target.value)}\n          />\n        </DateWrapper>\n        <SubmitDividend\n          onClick={() => handleSubmit()}\n          disabled={loading || !(amount && payDate)}\n        >\n          {loading ? <img src={littleLoader} alt=\"loading\" /> : \"Add\"}\n        </SubmitDividend>\n      </Row>\n      <History\n        opacity={loading ? \"0.5\" : null}\n        p_events={loading ? \"none\" : null}\n      >\n        <HistoryHeader>\n          <HistoryHeaderWrapper>\n            <h6>History:</h6>\n            <>\n              <div\n                onClick={() => {\n                  setShowAllDivs({\n                    show: true,\n                    payouts: stockPayouts,\n                    stock: stock,\n                  });\n                  console.log(stockPayouts);\n                }}\n              >\n                View All\n                {stockPayouts && stockPayouts.length > 4\n                  ? ` (${stockPayouts.length})`\n                  : null}\n                <img src={openModalIcon} alt=\"view all\" width=\"18px\" />\n              </div>\n            </>\n            <p>\n              Total:{\" \"}\n              {stockPayouts ? (\n                <span>{stockPayouts.length ? `$${getTotal()}` : \"$0\"}</span>\n              ) : (\n                \"$0\"\n              )}\n            </p>\n          </HistoryHeaderWrapper>\n        </HistoryHeader>\n        {stockPayouts ? (\n          <HistoryWrapper>\n            {stockPayouts.slice(0, 4).map((pay, ind) => (\n              <HistoryLine key={ind}>\n                <span>{ind + 1}</span>\n                <div>\n                  <p>${parseFloat(pay.amount).toFixed(2)}</p>\n                  <span>{formatDateData(pay.payDate)}</span>\n                  <DeleteDividend>\n                    <img\n                      src={deleteIcon}\n                      alt=\"delete dividend\"\n                      onClick={() => handleDelete(pay.created)}\n                    />\n                  </DeleteDividend>\n                </div>\n              </HistoryLine>\n            ))}\n          </HistoryWrapper>\n        ) : null}\n        {loading ? <DivLoader src={littleLoader} alt=\"loading\" /> : null}\n      </History>\n    </Container>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  selectCurrentUser: selectCurrentUser,\n  selectCurrentUserStocks: selectCurrentUserStocks,\n  selectShowAllDivs: selectShowAllDivs,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  setShowAllDivs: (viewOjb) => dispatch(setShowAllDivs(viewOjb)),\n  setShowAllDivsStock: (obj) => dispatch(setShowAllDivsStock(obj)),\n  setCurrentUserStocks: (arr) => dispatch(setCurrentUserStocks(arr)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DividendsForm);\n\n// styles\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  height: 100%;\n  width: 100%;\n  /* border: 1px solid red; */\n\n  label {\n    font-size: 0.9rem;\n    color: #444;\n  }\n  input {\n    width: 100%;\n    height: 2rem;\n    font-size: 1.2rem;\n    border: none;\n    outline: none;\n  }\n  input[type=\"number\"] {\n    max-width: 100px;\n    /* border: 1px solid orange; */\n  }\n`;\nconst SubmitDividend = styled.button`\n  &:focus {\n    outline: none;\n  }\n  &:hover {\n    background-color: #27d67b;\n    color: #fff;\n  }\n  color: #27d67b;\n  height: 2rem;\n  width: 7rem;\n  margin-left: auto;\n  background-color: #fff;\n  cursor: ${(props) => props.pointer};\n  transition-duration: 0.2s;\n  pointer-events: ${(props) => props.p_events};\n  border-radius: 20px;\n  border: 2px solid #27d67b;\n\n  img {\n    width: 1rem;\n    animation: spin_littleloader_in_dividend_submit 1s forwards linear infinite;\n\n    @keyframes spin_littleloader_in_dividend_submit {\n      to {\n        transform: rotate(360deg);\n      }\n    }\n  }\n`;\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  padding: 0 0.5rem;\n  background-color: #fff;\n  border-bottom: 2px solid #7249d1;\n  /* border: 1px solid blue; */\n\n  @media ${device.tablet} {\n    justify-content: space-between;\n  }\n`;\nconst RowInput = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n  background-color: #fff;\n  /* border: 1px solid red; */\n`;\nconst DateWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  @media ${device.tabletS} {\n    margin-left: 2rem;\n  }\n`;\nconst Amount = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst History = styled.div`\n  position: relative;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  opacity: ${(props) => props.opacity};\n  pointer-events: ${(props) => props.p_events};\n`;\nconst DivLoader = styled.img`\n  position: absolute;\n  top: 50%;\n  left: calc(50% - 1rem);\n  width: 2rem;\n  animation: spin_div_loader 1s linear infinite;\n\n  @keyframes spin_div_loader {\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\nconst HistoryHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\nconst HistoryHeaderWrapper = styled.div`\n  width: 100%;\n  font-size: 0.9rem;\n  display: flex;\n  justify-content: space-between;\n  padding: 0.3rem 0.7rem;\n  color: #fff;\n  background-color: #7249d1;\n\n  h6 {\n    font-size: 0.9rem;\n    padding: 0.1rem 0 0 0.2rem;\n  }\n\n  div {\n    cursor: pointer;\n    color: #fff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    img {\n      margin-left: 0.4rem;\n    }\n  }\n\n  p {\n    span {\n      color: #27d67b;\n    }\n  }\n`;\nconst HistoryWrapper = styled.div`\n  width: 100%;\n  height: fit-content;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin-top: 0.5rem;\n  /* border: 1px solid red; */\n\n  @media ${device.tabletS} {\n    padding: 0 1rem;\n  }\n`;\nconst HistoryLine = styled.div`\n  position: relative;\n  width: 48%;\n  margin: 0.1rem 0.1rem 0;\n  border: 1px solid #333;\n  border-top: none;\n  /* border: 1px solid red; */\n\n  span:first-of-type {\n    position: absolute;\n    left: 0.1rem;\n    color: #333;\n    font-size: 0.5rem;\n  }\n\n  div {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 0.8rem;\n    width: 100%;\n\n    p {\n      font-size: 1rem;\n      color: #27d67b;\n    }\n\n    span:first-of-type {\n      position: static;\n      font-size: 0.8rem;\n      color: #999;\n      margin-left: 0.3rem;\n    }\n  }\n`;\nconst DeleteDividend = styled.span`\n  img {\n    width: 1.2rem;\n    cursor: pointer;\n  }\n`;\nconst ViewAllWrapper = styled.div``;\n","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/ViewAll.js",["189"],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/Footer.js",["190"],"/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/AddMissing.js",["191","192"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { device } from \"../../resources/mediaquery\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { addStock, deleteStock } from \"../../resources/stockUtilities\";\nimport { selectCurrentUserStocks } from \"../../redux/user/user-selectors\";\nimport { setCurrentUserStocks } from \"../../redux/user/user-actions\";\nimport TransformIcon from \"../Shared/TransformIcon\";\n\nconst AddMissing = ({\n  user,\n  setCurrentUserStocks,\n  selectCurrentUserStocks,\n}) => {\n  const [alreadyAddedIcon] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608509562/Dividend%20Tracker/Icons/SearchResults/check-svgrepo-com_1_g7pyz8.svg\"\n  );\n  const [addToListIcon] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608506065/Dividend%20Tracker/Icons/SearchResults/add-svgrepo-com_gihegx.svg\"\n  );\n  const [littleLoader] = useState(\n    \"https://res.cloudinary.com/drucvvo7f/image/upload/v1608614181/Dividend%20Tracker/Icons/SearchResults/loading-loader-svgrepo-com_urrwap.svg\"\n  );\n  const [alreadyAdded, setAlreadyAdded] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [ticker, setTicker] = useState(null);\n  const [name, setName] = useState(null);\n\n  // adding stock function\n  const handleAddStock = async (user, stock) => {\n    setLoading(true);\n    let timeStampedStock = { ...stock, added: new Date().getTime() };\n    let success = await addStock(user, timeStampedStock);\n    console.log(success);\n    if (success.message === undefined) {\n      setCurrentUserStocks(selectCurrentUserStocks.concat(timeStampedStock));\n      setAlreadyAdded(!alreadyAdded);\n      setLoading(false);\n    } else {\n      setLoading(false);\n      console.log(success.message);\n    }\n  };\n\n  // handle unchecking the match aka deleting\n  const handleDelete = async (user, stock) => {\n    setLoading(true);\n    let success = await deleteStock(user, stock);\n    if (success.message === undefined) {\n      setCurrentUserStocks(\n        selectCurrentUserStocks.filter(\n          (stocks) => stocks.ticker !== stock.ticker\n        )\n      );\n      setAlreadyAdded(!alreadyAdded);\n      setLoading(false);\n    } else {\n      setLoading(false);\n      alert(success.message);\n      console.log(success.message);\n    }\n  };\n\n  const handleSubmit = () => {\n    let stock = {\n      ticker: ticker.toUpperCase(),\n      name: name,\n    };\n    if (!alreadyAdded) {\n      handleAddStock(user, stock);\n    } else {\n      handleDelete(user, stock);\n    }\n  };\n\n  return (\n    <Container>\n      <Col>\n        <label>Ticker/Symbol</label>\n        <input\n          type=\"text\"\n          placeholder=\"ticker\"\n          onChange={(e) => setTicker(e.target.value)}\n          style={ticker ? { textTransform: \"uppercase\" } : null}\n        />\n      </Col>\n      <Col>\n        <label>Company Name</label>\n        <input\n          type=\"text\"\n          placeholder=\"company name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </Col>\n      <IconsDiv onClick={() => (name && ticker ? handleSubmit() : null)}>\n        {loading ? (\n          <AlreadyAddedLoader>\n            <img src={littleLoader} alt=\"little loader\" />\n          </AlreadyAddedLoader>\n        ) : (\n          <TransformIcon\n            first={addToListIcon}\n            second={alreadyAddedIcon}\n            w1={\"1.5rem\"}\n            w2={\"1.5rem\"}\n            transform={alreadyAdded}\n          />\n        )}\n      </IconsDiv>\n    </Container>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  selectCurrentUserStocks: selectCurrentUserStocks,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrentUserStocks: (stocks) => dispatch(setCurrentUserStocks(stocks)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMissing);\n\n// styles\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  /* border: 1px solid #333; */\n\n  label {\n    margin-top: 0.8rem;\n  }\n\n  input {\n    font-family: \"Exo\", sans-serif;\n    height: 2rem;\n    width: 100%;\n    font-size: 18px;\n    padding: 0.2rem 0 0.2rem 0.2rem;\n  }\n\n  input::placeholder {\n    color: #ccc;\n  }\n`;\nconst Col = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst IconsDiv = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 1rem;\n  cursor: pointer;\n  /* border: 1px solid red; */\n`;\nconst AlreadyAddedLoader = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  animation: spin_already_added_loader 1s linear forwards infinite;\n  /* border: 1px solid red; */\n\n  img {\n    width: 1.5rem;\n  }\n\n  @keyframes spin_already_added_loader {\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Shared/D3Graph.js",["193","194"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { device } from \"../../resources/mediaquery\";\nimport * as d3 from \"d3\";\n\nconst D3Graph = ({ arr, stock }) => {\n  const [valueArr, setValueArr] = useState(null);\n  const [infoValues, setInfoValues] = useState(null);\n\n  useEffect(() => {\n    // console.log(arr);\n    if (!valueArr && !infoValues) {\n      makeValuesArray(arr);\n      makeInfoValues(arr);\n    } else {\n      drawChart(\"100%\", 100);\n    }\n    //   console.log(\"we running\");\n  }, [valueArr, infoValues]);\n\n  // make a values array from the time series data\n  const makeValuesArray = (obj) => {\n    let arr = Object.entries(obj);\n    let values = arr\n      .slice(0, 100)\n      .reverse()\n      .map((val) => {\n        return parseFloat(val[1].value.slice(1));\n      });\n    setValueArr(values.reverse());\n  };\n  // get first middle and last values for the infobar\n  const makeInfoValues = (obj) => {\n    let arr = Object.entries(obj).reverse();\n    // console.log(arr);\n    // console.log(arr.reverse());\n    setInfoValues([\n      formatInfo(arr[1][1].lastUpdated),\n      formatInfo(arr[50][1].lastUpdated),\n      formatInfo(arr[100][1].lastUpdated),\n    ]);\n  };\n\n  // format the info data\n  const formatInfo = (info) => {\n    let date = (info) => {\n      return info.slice(5, 10).replace(\"-\", \"/\");\n    };\n    let time = (info) => {\n      let rawTime = info.slice(11, -6);\n      return rawTime > 12 ? rawTime - 12 + \"pm\" : parseInt(rawTime) + \"am\";\n    };\n\n    return date(info) + \" \" + time(info);\n  };\n  // average for baseline value\n  const average = (array) => array.reduce((a, b) => a + b) / array.length;\n\n  // get the highest value\n  const getHigh = (array) => array.reduce((a, b) => (a > b ? a : b));\n\n  // get correct cents\n  const getCents = (num) => {\n    if (num.toString().includes(\".\")) {\n      return num.toString().slice(-2).includes(\".\")\n        ? (num.toString() + 0).slice(-2)\n        : num.toString().slice(-2);\n    } else {\n      return \"00\";\n    }\n  };\n  // D3 FUNC\n  const drawChart = (w, h) => {\n    // const data = [70, 55, 80, 95, 40, 80];\n    const data = valueArr;\n    const baseLine = data ? data : [100];\n    const dbase = average(baseLine) * 2;\n    // make the svg element\n    const svg = d3\n      .select(`#${stock.ticker}`)\n      .append(\"svg\")\n      .attr(\"width\", w)\n      .attr(\"height\", h);\n    // select all rect elements pass the data and\n    svg\n      .selectAll(\"rect\")\n      .data(data)\n      .enter()\n      .append(\"rect\")\n      .transition()\n      .delay((d, i) => `${i}8`)\n      .duration(800)\n      .attr(\"x\", (d, i) => `${i}%`)\n      .attr(\"y\", (d, i) => 0)\n      .attr(\"width\", \"3px\")\n      .attr(\"height\", (d) => {\n        let cents = getCents(d);\n\n        // console.log(\n        //   (\"The D:\", d, \"DBASE:\", dbase, \"PERCENT:\", cents / dbase) * 100\n        // );\n\n        return (d / dbase) * 100;\n      })\n      .attr(\"fill\", (d) => (d >= dbase / 2 ? \"#27d67b\" : \"#FF3501\"));\n\n    // 38/230 = .165 .165 x 100 = 16.5\n  };\n\n  return (\n    <Container id={`${stock.ticker}`}>\n      <Legend>\n        Market Value <span>(last 7 trading days)</span>\n      </Legend>\n      <LeftInfoBar>\n        <span>0</span>\n        {valueArr ? <span>${average(valueArr).toFixed(2)}</span> : null}\n        {valueArr ? <span>${getHigh(valueArr) / 0.5}</span> : null}\n      </LeftInfoBar>\n      {infoValues ? (\n        <BottomInfoBar>\n          {infoValues.map((i, ind) => (\n            <span key={ind}>{i}</span>\n          ))}\n        </BottomInfoBar>\n      ) : null}\n    </Container>\n  );\n};\n\nexport default D3Graph;\n\n// styles\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  padding: 0 0.1rem;\n  /* overflow: hidden; */\n  transform: scale(-1, -1);\n  background-color: #fff;\n  border-top: 2px solid #7249d1;\n  border-right: 2px solid #7249d1;\n  /* border: 1px solid red; */\n`;\nconst Legend = styled.div`\n  position: absolute;\n  width: 50%;\n  height: 2rem;\n  font-size: 0.8rem;\n  text-align: center;\n  top: calc(100% - 2rem);\n  left: calc(50% - 25%);\n  transform: rotate(180deg);\n  /* border: 1px solid gray; */\n\n  span {\n    display: none;\n\n    @media ${device.tabletS} {\n      display: initial;\n    }\n  }\n`;\nconst LeftInfoBar = styled.div`\n  position: absolute;\n  top: -0.5rem;\n  left: 100%;\n  width: 1rem;\n  height: 110%;\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: space-between;\n  align-items: center;\n  transform: rotate(180deg);\n  /* border: 1px solid blue; */\n\n  span {\n    font-size: 0.6rem;\n    padding-right: 0.1rem;\n    background-color: #fff;\n  }\n\n  span:nth-child(2) {\n    margin-bottom: 1rem;\n  }\n`;\nconst BottomInfoBar = styled.div`\n  position: absolute;\n  top: -1rem;\n  left: 0;\n  width: 100%;\n  height: 1rem;\n  font-size: 0.6rem;\n  padding-top: 0.5rem;\n  display: none;\n  justify-content: space-between;\n  transform: rotate(180deg);\n  /* border: 1px solid red; */\n\n  span {\n    transform: rotate(-15deg);\n    /* background-color: #fff; */\n  }\n\n  @media ${device.tabletS} {\n    display: flex;\n  }\n`;\n","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/Reports.js",["195"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport D3Graph from \"../Shared/D3Graph\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport {\n  selectCurrentUser,\n  selectCurrentUserStocks,\n} from \"../../redux/user/user-selectors\";\nimport {\n  selectTickerData,\n  selectShowAllDivs,\n} from \"../../redux/stocks/stocks-selectors\";\nimport HowManyStocks from \"./ReportComponents/HowManyStocks\";\n\nconst Reports = ({\n  selectCurrentUser,\n  selectCurrentUserStocks,\n  selectTickerData,\n  selectShowAllDivs,\n}) => {\n  return (\n    <Container>\n      <h1>Analysis Report:</h1>\n      <Wrapper>\n        <ReportWrapper>\n          <HowManyStocks\n            stocks={selectCurrentUserStocks}\n            user={selectCurrentUser}\n            tickers={selectTickerData}\n            divs={selectShowAllDivs}\n          />\n        </ReportWrapper>\n      </Wrapper>\n    </Container>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  selectCurrentUser: selectCurrentUser,\n  selectCurrentUserStocks: selectCurrentUserStocks,\n  selectTickerData: selectTickerData,\n  selectShowAllDivs: selectShowAllDivs,\n});\nconst mapDispatchToProps = (dispatch) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Reports);\n\n// styles\n\nconst Container = styled.div`\n  min-height: 100vh;\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst ReportWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/Components/Home/ReportComponents/HowManyStocks.js",["196","197"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst HowManyStocks = ({ stocks, user, tickers, divs }) => {\n  const [mostDividends, setMostDividends] = useState(null);\n  useEffect(() => {\n    console.log(mostDividends);\n    if (!mostDividends) {\n      getMostValuable(stocks);\n    }\n  }, [mostDividends]);\n  const totalPayouts = (arr) => {\n    return arr.payouts\n      ? arr.payouts.reduce(\n          (a, b) =>\n            parseFloat(a.amount).toFixed(2) + parseFloat(b.amount).toFixed(2)\n        )\n      : 0;\n  };\n  const getMostValuable = (arr) => {\n    let arrWithPayouts = arr.map((stock) =>\n      stock.payouts\n        ? { ...stock, total: totalPayouts(stock.payouts) }\n        : { ...stock, total: 0 }\n    );\n\n    console.log(arrWithPayouts);\n  };\n  return (\n    <Container>\n      <P>\n        You currently have <b>{stocks.length}</b>\n        {stocks.length === 1 ? \" holding\" : \" holdings\"}.\n      </P>\n      {mostDividends ? (\n        <P>\n          Your most dividend paid stock is {mostDividends.name}\n          <span>({mostDividends.ticker})</span>\n        </P>\n      ) : null}\n    </Container>\n  );\n};\n\nexport default HowManyStocks;\n\n// styles\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst P = styled.p`\n  font-size: 1.3rem;\n`;\n","/Users/jonathancooper 1/Desktop/Projects/GitHub/dividendtracker/src/reportWebVitals.js",[],{"ruleId":"198","severity":1,"message":"199","line":23,"column":6,"nodeType":"200","endLine":23,"endColumn":12,"suggestions":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"198","severity":1,"message":"206","line":40,"column":6,"nodeType":"200","endLine":40,"endColumn":35,"suggestions":"207"},{"ruleId":"208","severity":1,"message":"209","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":16},{"ruleId":"198","severity":1,"message":"212","line":42,"column":6,"nodeType":"200","endLine":42,"endColumn":12,"suggestions":"213"},{"ruleId":"198","severity":1,"message":"214","line":45,"column":6,"nodeType":"200","endLine":45,"endColumn":25,"suggestions":"215"},{"ruleId":"208","severity":1,"message":"216","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":13},{"ruleId":"208","severity":1,"message":"209","line":4,"column":10,"nodeType":"210","messageId":"211","endLine":4,"endColumn":16},{"ruleId":"208","severity":1,"message":"217","line":8,"column":8,"nodeType":"210","messageId":"211","endLine":8,"endColumn":26},{"ruleId":"208","severity":1,"message":"218","line":34,"column":11,"nodeType":"210","messageId":"211","endLine":34,"endColumn":18},{"ruleId":"208","severity":1,"message":"219","line":4,"column":10,"nodeType":"210","messageId":"211","endLine":4,"endColumn":24},{"ruleId":"208","severity":1,"message":"209","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":16},{"ruleId":"208","severity":1,"message":"220","line":14,"column":3,"nodeType":"210","messageId":"211","endLine":14,"endColumn":15},{"ruleId":"208","severity":1,"message":"209","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":16},{"ruleId":"208","severity":1,"message":"221","line":6,"column":10,"nodeType":"210","messageId":"211","endLine":6,"endColumn":21},{"ruleId":"208","severity":1,"message":"222","line":98,"column":7,"nodeType":"210","messageId":"211","endLine":98,"endColumn":18},{"ruleId":"208","severity":1,"message":"209","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":16},{"ruleId":"198","severity":1,"message":"223","line":53,"column":6,"nodeType":"200","endLine":53,"endColumn":31,"suggestions":"224"},{"ruleId":"208","severity":1,"message":"225","line":431,"column":7,"nodeType":"210","messageId":"211","endLine":431,"endColumn":21},{"ruleId":"208","severity":1,"message":"209","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":16},{"ruleId":"208","severity":1,"message":"209","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":16},{"ruleId":"208","severity":1,"message":"226","line":1,"column":27,"nodeType":"210","messageId":"211","endLine":1,"endColumn":36},{"ruleId":"208","severity":1,"message":"209","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":16},{"ruleId":"198","severity":1,"message":"227","line":19,"column":6,"nodeType":"200","endLine":19,"endColumn":28,"suggestions":"228"},{"ruleId":"208","severity":1,"message":"229","line":97,"column":13,"nodeType":"210","messageId":"211","endLine":97,"endColumn":18},{"ruleId":"208","severity":1,"message":"230","line":3,"column":8,"nodeType":"210","messageId":"211","endLine":3,"endColumn":15},{"ruleId":"208","severity":1,"message":"231","line":5,"column":25,"nodeType":"210","messageId":"211","endLine":5,"endColumn":41},{"ruleId":"198","severity":1,"message":"232","line":11,"column":6,"nodeType":"200","endLine":11,"endColumn":21,"suggestions":"233"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCurrentUser'. Either include it or remove the dependency array. Outer scope values like 'auth' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["234"],"no-native-reassign",["235"],"no-negated-in-lhs",["236"],"React Hook useEffect has missing dependencies: 'handleSearchFilter' and 'updateUserStocks'. Either include them or remove the dependency array.",["237"],"no-unused-vars","'device' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'getStocks', 'selectAllStocks', 'setCurrentUser', and 'setStocks'. Either include them or remove the dependency array. Outer scope values like 'auth' aren't valid dependencies because mutating them doesn't re-render the component.",["238"],"React Hook useEffect has missing dependencies: 'alreadyAddedCheck', 'filterResults', 'filteredResults.length', and 'selectCurrentUserStocks'. Either include them or remove the dependency array.",["239"],"'nas' is defined but never used.","'GoogleSignInButton' is defined but never used.","'userRef' is assigned a value but never used.","'setCurrentUser' is defined but never used.","'selectReload' is defined but never used.","'spinnerIcon' is assigned a value but never used.","'LoaderSmall' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getTotal', 'stock.ticker', and 'stockPayouts.length'. Either include them or remove the dependency array. If 'setStockPayouts' needs the current value of 'stock.ticker', you can also switch to useReducer instead of useState and read 'stock.ticker' in the reducer.",["240"],"'ViewAllWrapper' is assigned a value but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'arr', 'drawChart', and 'makeInfoValues'. Either include them or remove the dependency array.",["241"],"'cents' is assigned a value but never used.","'D3Graph' is defined but never used.","'setMostDividends' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getMostValuable' and 'stocks'. Either include them or remove the dependency array.",["242"],{"desc":"243","fix":"244"},"no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},"Update the dependencies array to be: [setCurrentUser]",{"range":"257","text":"258"},"Update the dependencies array to be: [setCurrentUserStocks, query, updateUserStocks, handleSearchFilter]",{"range":"259","text":"260"},"Update the dependencies array to be: [getStocks, selectAllStocks, setCurrentUser, setStocks]",{"range":"261","text":"262"},"Update the dependencies array to be: [alreadyAddedCheck, filterResults, filteredResults.length, query, selectCurrentUserStocks, tickersArr]",{"range":"263","text":"264"},"Update the dependencies array to be: [getTotal, selectCurrentUserStocks, stock.ticker, stockPayouts.length]",{"range":"265","text":"266"},"Update the dependencies array to be: [valueArr, infoValues, arr, makeInfoValues, drawChart]",{"range":"267","text":"268"},"Update the dependencies array to be: [getMostValuable, mostDividends, stocks]",{"range":"269","text":"270"},[862,868],"[setCurrentUser]",[1431,1460],"[setCurrentUserStocks, query, updateUserStocks, handleSearchFilter]",[1240,1246],"[getStocks, selectAllStocks, setCurrentUser, setStocks]",[1819,1838],"[alreadyAddedCheck, filterResults, filteredResults.length, query, selectCurrentUserStocks, tickersArr]",[1905,1930],"[getTotal, selectCurrentUserStocks, stock.ticker, stockPayouts.length]",[541,563],"[valueArr, infoValues, arr, makeInfoValues, drawChart]",[334,349],"[getMostValuable, mostDividends, stocks]"]